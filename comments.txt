# This file is for comments frow the reviewer
Ты первый из моих ревьюверов, кто действительно вникает в код и даёт дельные практические советы на будущее. Сразу видно, что человек хорошо разбирается в своей сфере, реально спасибо! 

> Ты вроде ходишь в каталог sql за скриптами, зачем они тут дублируются?

Поскольку в задании говорится про скрипты миграции, которые надо отдельно,
и про остальные источники в т.ч. даги, которые тоже отдельно. 
Скрипты должны быть в том же корне, что и DAG, чтобы на них ссылаться в PostgresOperator.
Поэтому было не понятно куда что класть. И я положил вовсюда, чтобы наверняка)
Исправил.

> Если мы подразумеваем, что тут у нас константы, то следует писать их капсом, как принято в Python.
> Здесь объявлен BranchPythonOperator , но в коде он не используется.

В исходных данных к заданию уже был некоторый DAG с этими огрехами, который я изменял для задания.
Исправил) Про константы я в курсе, но как будто в python правила нейминга более гибкие, 
если не сказать странные, чем в той же Java, в т.ч. и насчёт констант.

> Таким образом ты сможешь делать разные типы логов, info, warning, error. Это сильно упростит работу по дебагу )
> Я бы внутри TimeoutError добавил какой-нибудь свой текст ошибки с пояснением что не получилось сделать =)

Спасибо, реально полезная штука! Взял на заметку)
Как раз за одно на error-ах повставлял нужные логи вместо принта из вызова error

> Не нужно дропать, грузи данные в пандас с параметром index_col=0, тогда столбец id у тебя будет индексом и не будет писаться в базу, потому что выбран параметр index=False

Да, новичкам трудно подмечать нюансы с аргументами функций, для этого нужно очень хорошо знать документации. Поэтому подсказки особенно ценны)

> Вместо df.to_sql можно попробовать написать sql запрос с командой COPY и тогда pandas вообще не понадобится )

До этого тоже дойду, мне для с популярными библиотеками нужно наиграться)

> Бывает API запрос не срабатывает, советую накинуть ретраев

Да, я уже сталкивался с тем, что иногда клауд сервер не поспевает и роняет таску. Для этого поднял время таймера вдвое, чтоб запросов меньше было. 
Но раз всё равно выскакивает, то лишний ретрай добавил. Опять же я ещё не наигрался со всем этим шедулингом по времени, поэтому не знаю:
если ретраи случается, то он относится к 1 инстансу DAG или ко всем?

> Советую создавать таски в цикле. Например, вот так:

Да, у нас даже в темах спринта было про группировку операторов. Но это всё же для реально большого DAG. Здесь мне такой синтаксис наоборот удобней.
Да и в целом, смотреть на порядок тасков удобно из UI и это главное, что мне нравится в Airflow - структура кода видна графически.  
